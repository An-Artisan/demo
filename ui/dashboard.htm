<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <title>币币交易平台</title>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body {
            font-family: "PingFang SC", "Microsoft YaHei", sans-serif;
            background: #f2f3f5;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .header select {
            padding: 6px 10px;
            font-size: 16px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .info-bar {
            background: #fff;
            padding: 15px 20px;
            border-radius: 8px;
            font-size: 16px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
            margin-bottom: 15px;
        }

        .info-bar.up {
            color: green;
        }

        .info-bar.down {
            color: red;
        }

        .grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
        }

        .kline-box {
            background: #fff;
            border-radius: 10px;
            padding: 10px;
            box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
            height: 450px;
        }

        #klineChart {
            width: 100%;
            height: 100%;
        }

        .panel-wrap {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-top: 20px;
        }

        .panel {
            background: #fff;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
        }

        .panel h3 {
            font-size: 18px;
            margin-bottom: 12px;
            border-bottom: 1px solid #eee;
            padding-bottom: 8px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            text-align: left;
            padding: 6px 8px;
            font-size: 14px;
        }

        tr:nth-child(even) {
            background: #fafafa;
        }

        th {
            background: #f0f0f0;
            font-weight: bold;
        }

        .trade-form input, .trade-form select, .trade-form button {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            font-size: 14px;
            border: 1px solid #ccc;
        }

        .trade-form button {
            background-color: #12b886;
            color: white;
            font-weight: bold;
            cursor: pointer;
            border: none;
        }

        .trade-form button:hover {
            background-color: #0ca678;
        }

        .tabs {
            margin-top: 30px;
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .tabs button {
            padding: 8px 20px;
            border: none;
            background: #ddd;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }

        .tabs button:hover {
            background: #bbb;
        }

        .tab-content {
            margin-top: 10px;
            background: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <label>
            币种选择：
            <select id="coinPairSelect"></select>
        </label>
        <div class="info-bar" id="marketInfo">当前币种: BTC/USDT，价格: --，涨幅: --</div>
    </div>
    <div class="grid">
        <div class="kline-box">
            <div id="klineChart"></div>
        </div>
        <div class="panel">
            <h3>本地数据最新成交</h3>
            <table id="tradeTable">
                <thead>
                <tr>
                    <th>时间</th>
                    <th>价格</th>
                    <th>数量</th>
                    <th>手续费</th>
                </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <div class="panel-wrap">
        <div class="panel">
            <h3>API数据盘口</h3>
            <table id="orderBookTable"></table>
            <h3>本地数据盘口</h3>
            <table id="orderBookTableLocal"></table>
        </div>
        <div class="panel trade-form">
            <h3>交易</h3>

            <!-- 类型选择 -->
            <select id="orderType" onchange="togglePriceField()">
                <option value="limit">限价</option>
                <option value="market">市价</option>
            </select>

            <!-- 价格输入框，市价时会隐藏 -->
            <input type="number" id="priceInput" placeholder="价格（USDT）">

            <!-- 数量输入框 -->
            <input type="number" id="amountInput" placeholder="数量（BTC）">

            <!-- 交易按钮 -->
            <div style="display: flex; gap: 10px;">
                <button onclick="placeOrder(0)">买入</button>
                <button onclick="placeOrder(1)" style="background-color: #f03e3e;">卖出</button>
            </div>
        </div>

        <div class="panel">
            <h3>API资产</h3>
            <div class="total-assets" id="totalAsset"></div> <!-- ✅ 总资产展示 -->
            <table id="assetTable">
                <thead>
                <tr>
                    <th>账户类型</th>
                    <th>金额</th>
                    <th>币种</th>
                </tr>
                </thead>
                <tbody></tbody>
            </table>

            <h3>本地数据资产</h3>
            <div class="total-assets" id="totalAssetLocal"></div> <!-- ✅ 总资产展示 -->
            <table id="assetTableLocal">
                <thead>
                <tr>
                    <th>账户类型</th>
                    <th>金额</th>
                    <th>币种</th>
                </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <div class="tabs">
        <button onclick="loadTab('current')">当前委托</button>
        <button onclick="loadTab('history')">委托历史</button>
        <button onclick="loadTab('trades')">成交记录</button>
    </div>

    <!-- 当前委托表格 -->
    <div id="tab-content">
        <table id="currentOrdersTable">
            <thead>
            <tr>
                <th>订单ID</th>
                <th>交易对</th>
                <th>类型</th>
                <th>方向</th>
                <th>价格</th>
                <th>数量</th>
                <th>已成交</th>
                <th>状态</th>
                <th>时间</th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<script>
    const useAjax = false;
    let currentTab = 'current';
    let currentCoin = 'BTC';
    let pollingIntervalId = null; // 定时器 ID

    function fetchCoinList() {
        axios.get('http://localhost:8888/coins/get-currency-list').then(res => {
            if (res.data.code === 200) {
                let list = res.data.data;
                const priority = ['BTC_USDT', 'ETH_USDT'];
                const sortedList = [
                    ...list.filter(item => priority.includes(item.id)).sort((a, b) => priority.indexOf(a.id) - priority.indexOf(b.id)),
                    ...list.filter(item => !priority.includes(item.id))
                ];
                const select = document.getElementById('coinPairSelect');
                select.innerHTML = '';
                sortedList.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.base;
                    option.text = `${item.base}/${item.quote}`;
                    select.appendChild(option);
                });
                currentCoin = sortedList[0].base;
                updatePage(currentCoin);
            }
        });
    }

    function fetchMarketInfo(base) {
        axios.get('http://localhost:8888/coins/get-currency-info?currency_pair=' + `${base}_USDT`).then(res => {
            if (res.data.code === 200) {
                const info = res.data.data.find(item => item.currency_pair === `${base}_USDT`);
                if (info) {
                    const change = parseFloat(info.change_percentage);
                    const infoBar = document.getElementById('marketInfo');
                    infoBar.innerText = `当前币种: ${info.currency_pair.replace('_', '/')}, 价格: ${info.last}, 涨幅: ${change.toFixed(2)}%`;
                    infoBar.className = 'info-bar ' + (change >= 0 ? 'up' : 'down');
                }
            }
        });
    }
    function togglePriceField() {
        const orderType = document.getElementById('orderType').value;
        const priceInput = document.getElementById('priceInput');

        if (orderType === 'market') {
            priceInput.style.display = 'none';
        } else {
            priceInput.style.display = 'block';
        }
    }
    function fetchKlineData(base) {
        axios.get(`http://localhost:8888/coins/get-currency-kline?currency_pair=${base}_USDT&interval=1h&limit=1000`).then(res => {
            if (res.data.code === 200) {
                const klineRaw = res.data.data;
                const klineFormatted = klineRaw.map(item => {
                    const time = new Date(item[0] * 1000).toLocaleString('zh-CN', {
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit'
                    }).replace(/\//g, '-');
                    return [time, parseFloat(item[4]), parseFloat(item[2]), parseFloat(item[3]), parseFloat(item[5])];
                });
                renderKline(klineFormatted);
            }
        });
    }

    function fetchOrderBook(base) {
        axios.get(`http://localhost:8888/coins/get-currency-depth?currency_pair=${base}_USDT`)
            .then(res => {
                if (res.data.code === 200) {
                    const asks = res.data.data.asks.slice(0, 10).reverse(); // 卖盘倒序（卖1在底部）
                    const bids = res.data.data.bids.slice(0, 10);           // 买盘正序（买1在顶部）

                    let html = '<tr><th>卖出价</th><th>卖出量</th><th>买入价</th><th>买入量</th></tr>';
                    for (let i = 0; i < 10; i++) {
                        const ask = asks[i] || ["", ""];
                        const bid = bids[i] || ["", ""];
                        html += `<tr>
                        <td>${ask[0]}</td><td>${ask[1]}</td>
                        <td>${bid[0]}</td><td>${bid[1]}</td>
                    </tr>`;
                    }
                    document.getElementById('orderBookTable').innerHTML = html;
                }
            });
    }

    function fetchOrderBookWithLocal(base) {
        axios.get(`http://localhost:8888/coins/get-currency-depth-local?pair_id=${base}_USDT`)
            .then(res => {
                if (res.data.code === 200) {
                    const asks = res.data.data.asks.slice(0, 10).reverse(); // 卖盘倒序（卖1在底部）
                    const bids = res.data.data.bids.slice(0, 10);           // 买盘正序（买1在顶部）

                    let html = '<tr><th>卖出价</th><th>卖出量</th><th>买入价</th><th>买入量</th></tr>';

                    const maxRows = Math.max(asks.length, bids.length, 10); // 至少展示10行
                    for (let i = 0; i < maxRows; i++) {
                        const ask = asks[i] || [];
                        const bid = bids[i] || [];

                        const askPrice = ask[0] || '<span style="color:#999">暂无数据</span>';
                        const askAmount = ask[1] || '';
                        const bidPrice = bid[0] || '<span style="color:#999">暂无数据</span>';
                        const bidAmount = bid[1] || '';

                        html += `<tr>
        <td>${askPrice}</td><td>${askAmount}</td>
        <td>${bidPrice}</td><td>${bidAmount}</td>
    </tr>`;
                    }

                    document.getElementById('orderBookTableLocal').innerHTML = html;
                }
            });
    }

    function fetchLatestTrades(pairId) {
        axios.get(`http://localhost:8888/order/get-latest-trades?pair_id=${pairId}`).then(res => {
            if (res.data.code === 200) {
                const list = res.data.data.list;
                const table = document.querySelector('#tradeTable tbody');
                table.innerHTML = '';

                if (list.length === 0) {
                    table.innerHTML = `<tr><td colspan="4" style="text-align:center;color:#999;">暂无数据</td></tr>`;
                    return;
                }

                list.forEach(trade => {
                    table.innerHTML += `<tr>
                    <td>${trade.created_at}</td>
                    <td>${trade.price}</td>
                    <td>${trade.amount}</td>
                    <td>${trade.fee}</td>
                </tr>`;
                });
            }
        });
    }

    function fetchCurrentOrders(base) {
        axios.get(`http://localhost:8888/order/get-current-order-list?pair_id=${base}`).then(res => {
            const tbody = document.querySelector('#currentOrdersTable tbody');
            tbody.innerHTML = '';

            const orderList = res.data.data; // 数据结构是数组了

            if (res.data.code === 200 && Array.isArray(orderList) && orderList.length > 0) {
                orderList.forEach(order => {
                    const typeText = order.type === 0 ? '限价' : '市价';
                    const sideText = order.side === 0 ? '买入' : '卖出';
                    const statusMap = {
                        0: '未成交',
                        1: '部分成交',
                        2: '已成交',
                        3: '已取消'
                    };
                    const statusText = statusMap[order.status] || '未知';
                    const displayPrice = order.type === 1 ? '-' : order.price;

                    tbody.innerHTML += `
                <tr>
                    <td>${order.order_id}</td>
                    <td>${order.pair_id}</td>
                    <td>${typeText}</td>
                    <td>${sideText}</td>
                    <td>${displayPrice}</td>
                    <td>${order.amount}</td>
                    <td>${order.filled_amount}</td>
                    <td>${statusText}</td>
                    <td>${order.created_at}</td>
                </tr>`;
                });
            } else {
                tbody.innerHTML = '<tr><td colspan="9" style="text-align:center;">暂无当前委托</td></tr>';
            }
        });
    }
    function fetchHistoryOrders(base) {
        axios.get(`http://localhost:8888/order/get-history-order-list?pair_id=${base}`).then(res => {
            const tbody = document.querySelector('#currentOrdersTable tbody');
            tbody.innerHTML = '';

            const orderList = res.data.data; // 数据结构是数组了

            if (res.data.code === 200 && Array.isArray(orderList) && orderList.length > 0) {
                orderList.forEach(order => {
                    const typeText = order.type === 0 ? '限价' : '市价';
                    const sideText = order.side === 0 ? '买入' : '卖出';
                    const statusMap = {
                        0: '未成交',
                        1: '部分成交',
                        2: '已成交',
                        3: '已取消'
                    };
                    const statusText = statusMap[order.status] || '未知';
                    const displayPrice = order.type === 1 ? '-' : order.price;

                    tbody.innerHTML += `
                <tr>
                    <td>${order.order_id}</td>
                    <td>${order.pair_id}</td>
                    <td>${typeText}</td>
                    <td>${sideText}</td>
                    <td>${displayPrice}</td>
                    <td>${order.amount}</td>
                    <td>${order.filled_amount}</td>
                    <td>${statusText}</td>
                    <td>${order.created_at}</td>
                </tr>`;
                });
            } else {
                tbody.innerHTML = '<tr><td colspan="9" style="text-align:center;">暂无当前委托</td></tr>';
            }
        });
    }
    function fetchTradeRecords(base) {
        axios.get(`http://localhost:8888/order/get-filled-order-list?pair_id=${base}`).then(res => {
            const tbody = document.querySelector('#currentOrdersTable tbody');
            tbody.innerHTML = '';

            const orderList = res.data.data; // 数据结构是数组了

            if (res.data.code === 200 && Array.isArray(orderList) && orderList.length > 0) {
                orderList.forEach(order => {
                    const typeText = order.type === 0 ? '限价' : '市价';
                    const sideText = order.side === 0 ? '买入' : '卖出';
                    const statusMap = {
                        0: '未成交',
                        1: '部分成交',
                        2: '已成交',
                        3: '已取消'
                    };
                    const statusText = statusMap[order.status] || '未知';

                    tbody.innerHTML += `
                <tr>
                    <td>${order.order_id}</td>
                    <td>${order.pair_id}</td>
                    <td>${typeText}</td>
                    <td>${sideText}</td>
                    <td>${order.price}</td>
                    <td>${order.amount}</td>
                    <td>${order.filled_amount}</td>
                    <td>${statusText}</td>
                    <td>${order.created_at}</td>
                </tr>`;
                });
            } else {
                tbody.innerHTML = '<tr><td colspan="9" style="text-align:center;">暂无当前委托</td></tr>';
            }
        });
    }
    function fetchAssetData(pairId) {
        const [base, quote] = pairId.split('_'); // 拆成 BTC 和 USDT
        const tbody = document.querySelector('#assetTable tbody');
        tbody.innerHTML = ''; // 清空旧内容

        let totalAmount = 0;
        let currencySymbol = '';

        // 请求 quote 币种资产（主展示）
        axios.get(`http://localhost:8888/users/get-balance?currency=${quote}`).then(res => {
            if (res.data.code === 200) {
                const data = res.data.data;
                const total = data.total;
                const details = data.details;

                totalAmount = parseFloat(total.amount);
                currencySymbol = total.currency;

                // ✅ 分账户展示（只展示金额 > 0）
                for (let type in details) {
                    const row = details[type];
                    if (parseFloat(row.amount) > 0) {
                        let label = type;
                        if (type === 'finance') label = '金融余额';
                        else if (type === 'futures') label = '合约余额';
                        else if (type === 'spot') label = '现货余额';
                        tbody.innerHTML += `<tr><td>${label}</td><td>${row.amount}</td><td>${row.currency}</td></tr>`;
                    }
                }

                // ✅ 现货账户详情（可用/锁定余额）
                let token = data.spot?.find(item => item.currency === quote.toUpperCase());
                const available = token ? token.available : '0';
                const locked = token ? token.locked : '0';
                tbody.innerHTML += `<tr><td>${quote} 可用余额</td><td>${available}</td><td>${quote}</td></tr>`;
                tbody.innerHTML += `<tr><td>${quote} 锁定余额</td><td>${locked}</td><td>${quote}</td></tr>`;

                // ✅ 设置总资产
                document.getElementById('totalAsset').innerText = `总资产：${totalAmount.toFixed(4)} ${currencySymbol}`;
            }
        });

        // 请求 base 币种，仅展示可用/锁定余额
        axios.get(`http://localhost:8888/users/get-balance?currency=${base}`).then(res => {
            if (res.data.code === 200) {
                const data = res.data.data;
                let token = data.spot?.find(item => item.currency === base.toUpperCase());
                const available = token ? token.available : '0';
                const locked = token ? token.locked : '0';

                tbody.innerHTML += `<tr><td>${base} 可用余额</td><td>${available}</td><td>${base}</td></tr>`;
                tbody.innerHTML += `<tr><td>${base} 锁定余额</td><td>${locked}</td><td>${base}</td></tr>`;
            }
        }).catch(err => {
            console.error('获取本地资产失败', err);
            document.getElementById('totalAsset').innerText = '资产加载失败 ❌';
        });
    }


    function fetchAssetDataLocal(pairId) {
        const [base, quote] = pairId.split('_'); // 拆成 BTC 和 USDT
        const tbody = document.querySelector('#assetTableLocal tbody');
        tbody.innerHTML = ''; // 清空旧内容

        let totalAmount = 0;
        let currencySymbol = '';

        // 请求 quote 币种资产（主展示）
        axios.get(`http://localhost:8888/users/get-balance-local?currency=${quote}`).then(res => {
            if (res.data.code === 200) {
                const data = res.data.data;
                const total = data.total;
                const details = data.details;

                totalAmount = parseFloat(total.amount);
                currencySymbol = total.currency;

                // ✅ 分账户展示（只展示金额 > 0）
                for (let type in details) {
                    const row = details[type];
                    if (parseFloat(row.amount) > 0) {
                        let label = type;
                        if (type === 'finance') label = '金融余额';
                        else if (type === 'futures') label = '合约余额';
                        else if (type === 'spot') label = '现货余额';
                        tbody.innerHTML += `<tr><td>${label}</td><td>${row.amount}</td><td>${row.currency}</td></tr>`;
                    }
                }

                // ✅ 现货账户详情（可用/锁定余额）
                let token = data.spot?.find(item => item.currency === quote.toUpperCase());
                const available = token ? token.available : '0';
                const locked = token ? token.locked : '0';
                tbody.innerHTML += `<tr><td>${quote} 可用余额</td><td>${available}</td><td>${quote}</td></tr>`;
                tbody.innerHTML += `<tr><td>${quote} 锁定余额</td><td>${locked}</td><td>${quote}</td></tr>`;

                // ✅ 设置总资产
                document.getElementById('totalAssetLocal').innerText = `总资产：${totalAmount.toFixed(4)} ${currencySymbol}`;
            }
        });

        // 请求 base 币种，仅展示可用/锁定余额
        axios.get(`http://localhost:8888/users/get-balance-local?currency=${base}`).then(res => {
            if (res.data.code === 200) {
                const data = res.data.data;
                let token = data.spot?.find(item => item.currency === base.toUpperCase());
                const available = token ? token.available : '0';
                const locked = token ? token.locked : '0';

                tbody.innerHTML += `<tr><td>${base} 可用余额</td><td>${available}</td><td>${base}</td></tr>`;
                tbody.innerHTML += `<tr><td>${base} 锁定余额</td><td>${locked}</td><td>${base}</td></tr>`;
            }
        }).catch(err => {
            console.error('获取本地资产失败', err);
            document.getElementById('totalAssetLocal').innerText = '资产加载失败 ❌';
        });
    }







    function updatePage(coinKey) {
        currentCoin = coinKey;
        document.getElementById('amountInput').placeholder = `数量（${coinKey}）`;

        // ✅ 首次加载执行一次
        fetchMarketInfo(coinKey);
        fetchKlineData(coinKey);
        fetchOrderBook(coinKey);
        fetchOrderBookWithLocal(coinKey);
        fetchAssetData(`${coinKey}_USDT`);
        fetchAssetDataLocal(`${coinKey}_USDT`);
        fetchLatestTrades(`${coinKey}_USDT`);
        fetchCurrentOrders(`${coinKey}_USDT`);

        //  清除旧定时器，避免重复轮询
        if (pollingIntervalId) {
            clearInterval(pollingIntervalId);
        }

        //  每秒轮询刷新 K 线 和 行情
        pollingIntervalId = setInterval(() => {
            // fetchMarketInfo(coinKey);
            // fetchKlineData(coinKey);
            // fetchOrderBook(coinKey);
            // fetchOrderBookWithLocal(coinKey);
            // fetchLatestTrades(`${coinKey}_USDT`);
        }, 5000);
    }

    function renderKline(klineData) {
        const chart = echarts.init(document.getElementById('klineChart'));
        const times = klineData.map(i => i[0]);
        const values = klineData.map(i => i.slice(1));
        chart.setOption({
            tooltip: {
                trigger: 'axis',
                formatter: function (params) {
                    const d = params[0];
                    const val = d.data;
                    return `${d.axisValue}<br/>开盘: ${val[0]}<br/>最高: ${val[1]}<br/>最低: ${val[2]}<br/>收盘: ${val[3]}`;
                }
            },
            xAxis: {type: 'category', data: times},
            yAxis: {type: 'value'},
            series: [{
                type: 'candlestick',
                data: values,
                itemStyle: {color: '#ec0000', color0: '#00da3c', borderColor: '#8A0000', borderColor0: '#008F28'}
            }]
        });
    }

    function placeOrder(side) {
        const pairId = `${currentCoin}_USDT`;
        const type = document.getElementById('orderType').value === 'limit' ? 0 : 1;
        const price = parseFloat(document.getElementById('priceInput').value);
        const amount = parseFloat(document.getElementById('amountInput').value);

        if (!amount || (type === 0 && !price)) {
            alert('请输入正确的' + (type === 0 ? '价格和数量' : '数量'));
            return;
        }

        const payload = {
            pair_id: pairId,
            type: type,
            side: side,
            price: type === 0 ? price : 0, // 市价不填价格
            amount: amount
        };

        axios.post('http://localhost:8888/order/create-order', payload)
            .then(res => {
                if (res.data.code === 200) {
                    alert((side === 0 ? '买入' : '卖出') + '成功 ✅');
                    // 刷新页面关键模块（不要整页刷新）
                    fetchCurrentOrders(pairId);
                    fetchAssetData(pairId);
                    fetchAssetDataLocal(pairId);
                    fetchOrderBook(currentCoin);
                    fetchOrderBookWithLocal(currentCoin);
                    fetchLatestTrades(pairId);
                    fetchMarketInfo(currentCoin);
                    fetchKlineData(currentCoin); // 可选：刷新K线图
                    // ✅ 清空输入框
                    document.getElementById('priceInput').value = '';
                    document.getElementById('amountInput').value = '';
                } else {
                    alert(`下单失败 ❌：${res.data.message}`);
                }
            })
            .catch(err => {
                console.error(err);
                alert('网络请求异常或服务器错误 ❌');
            });
    }

    function loadTab(tabName) {
        if (tabName === 'current') {
            fetchCurrentOrders(`${currentCoin}_USDT`);
        } else if (tabName === 'history') {
            fetchHistoryOrders(`${currentCoin}_USDT`);
        } else if (tabName === 'trades') {
            fetchTradeRecords(`${currentCoin}_USDT`)
        }
    }

    document.getElementById('coinPairSelect').addEventListener('change', function () {
        const coinKey = this.value;
        updatePage(coinKey);
    });

    window.addEventListener('DOMContentLoaded', () => {
        fetchCoinList();
    });
</script>

</body>

</html>
